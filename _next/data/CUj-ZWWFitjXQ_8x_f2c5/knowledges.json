{"pageProps":{"allPosts":[{"path":"knowledges/css/index","content":"# css\n\n## center align\n\n```\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  min-height: 100vh;\n```\n\n심플해보이는 방법이다.\n\n### translate\n\n```\nposition: absolute;\ntop: 50%;\nleft: 50%;\ntransform: translate(-50%, -50%);\n```\n\n보통 모달 등을 중앙 정렬할 때 absolute와 조합하기 편하다.\n\n\n\n## position\n### absolute\nhttps://www.w3.org/TR/CSS2/visudet.html#containing-block-details\nabsolute, relative, fixed로 position이 지정된 가장 가까운 조상에 따라 설정된다.\nparent에 position: relative을 설정하는 것이 일반적이다. \n\n\n## select의 padding\n### appearance\n```\n  -moz-appearance: none;\n  -webkit-appearance: none;\n  appearance: none;\n```\n가 없으면 padding이 동작하지 않는다. 그러나 appearance는 IE에 한정하여 동작하므로 주의.\n\n\n## list\n### list-style-type\n```\n    list-style-type: none;\n```\nbullet을 제거해준다. 브라우저에 따라 다양한 type을 지원한다.\n\n\n## ui / modal\n- modal-container를 전체 영역으로 뿌옇게 색칠하고, modal을 그 위에 그리는 형태.\n\n## animation\n### keyframes\n```\nanimation-name: modalopen;\nanimation-duration: 1s;\n\n@keyframes modalopen {\n  from {\n    opacity: 0;\n  }\n\n  to {\n    opacity: 1;\n  }\n}\n```\n- animation을 별도로 지정할 수 있는데 가독성이 훨씬 좋아보인다.\n","slug":"index"},{"path":"knowledges/html/index","content":"# Html\n\n## label\n### for\n보통 input의 id와 연결할 때 쓴다.\n연결이라 함은, label을 클릭했을 때 for에 매칭되는 id의 element에 초점을 맞추거나 활성화이다.\n\nlabel안에 요소를 배치하는 것이 더 가독성이 높아보인다.\n이 때, label안에 button 등의 interaction 요소는 넣지 않도록 주의한다. > 입력할 때 어려움을 겪으므로\n또한 h1, h2, h3,... 등의 제목요소를 안에 넣지 않도록 주의한다. > 탐색 목적의 보조 도구로 사용되는데, screan reading에서의 보조 기술을 방해하게 됨.\n\n","slug":"index"},{"path":"knowledges/intellij/index","content":"# Intellij\n\n## Html\n### live edit\n^D: debug 'index.html' 을 이용해서 새로고침 없이 브라우저에서 결과물 테스트가 가능하다.\n","slug":"index"},{"path":"knowledges/intellij/shortcut/index","content":"- down: cmd + enter\n  - 해보면 위쪽 화살표 키를 누르는 건 쉽지만 아래쪽 화살표 키를 누르는 건 꽤나 노력이 필요하다. \n  생산성을 위해 방향키 아래를 대체하는 단축키가 필요했다. \n\n\n- ctrl + e / a\n    - go to line end / start\n\n\n- opt + shift + [ / ]\n    - shift project tab\n    \n- ctrl + shift + up / down\n    - paragraph 단위로 이동\n\n\n수정\n","slug":"index"},{"path":"knowledges/mysql/index","content":"'1x,2x,3x' 로 넣어야 됨. 공백 넣으면 안 됨 주의.\n\n\n","slug":"index"},{"path":"knowledges/nextjs/deploy/github-pages","content":"# Deploy\n\n## Github pages\n\ngithub pages로 배포를 할 수 있다.\n도메인 명을 원한다면 repo명을 {USERNAME}.github.io 로 생성한다.\n\ngithub의 settings에서 github pages를 설정하고 배포할 수 있는데,\nbranch를 master로 설정하게 되면 보통 README.md 파일이 보이는 형태로 배포가 될 것이다.\n\nnextjs 배포의 기본 전략은, gh-pages라는 다른 branch를 두고, 이 branch에 build된 실행 소스만 커밋하는 전략이다.\n그리고 github pages의 branch를 gh-pages로 설정하면 실행 소스에 대해 따로 배포가 된다.\n\n\nnext build 로 빌드를 하고\nnext export 로 ./out/ 디렉토리에 실행 소스를 생성한 후\ntouch out/.nojekyll 으로 _next 디렉토리 등 underbar가 prefix로 붙은 디렉토리가 github pages에서 처리하지 않도록 설정해둔다.\n\n그리고 ./out/ 디렉토리를 gh-pages branch에 push하면 된다.\n방법 중에 하나는 `npm i --save-dev gh-pages` 모듈을 이용해서 \n`gh-pages -d out`\n으로 push하는 방법이 있다.\n\n### Github actions\nmaster 머지 시 자동으로 배포가 되길 원할 것이다.\n이를 gh actions로 간편하게 할 수 있다.\n\n위의 배포과정을 동일하게 수행하면 되는데, gh-pages 모듈을 쓰는 대신에\n\n```\n- name: push .out/ to gh-pages\n- run: |\n  git config user.name github-actions\n  git config user.email github-actions@github.com\n  git --work-tree out add --all\n  git commit -m \"Automatic Deploy action run by github-actions\"\n  git push origin HEAD:gh-pages --force\n```\n으로 push를 하면, remote server의 git config 설정을 따로 할 필요가 없어서 간편하다.\n","slug":"github-pages"},{"path":"knowledges/typescript/troubleShootings","content":"","slug":"troubleShootings"},{"path":"knowledges/vanillajs/index","content":"# Vanilla JS\n\n## Element.classList\n### toggle\n`div.classList.toggle(\"visible\");`\n지원함\n\n\n## Location\n### Location.reload()\n\n새로고침 버튼처럼 현재 리소스를 다시 불러온다.\n","slug":"index"}]},"__N_SSG":true}